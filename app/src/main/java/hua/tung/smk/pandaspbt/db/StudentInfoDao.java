package hua.tung.smk.pandaspbt.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table "STUDENT_INFO".
*/
public class StudentInfoDao extends AbstractDao<StudentInfo, Long> {

    public static final String TABLENAME = "STUDENT_INFO";

    /**
     * Properties of entity StudentInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Student_id = new Property(0, Long.class, "student_id", true, "STUDENT_ID");
        public final static Property Student_name = new Property(1, String.class, "student_name", false, "STUDENT_NAME");
        public final static Property Student_no = new Property(2, String.class, "student_no", false, "STUDENT_NO");
        public final static Property Student_class = new Property(3, String.class, "student_class", false, "STUDENT_CLASS");
    }


    public StudentInfoDao(DaoConfig config) {
        super(config);
    }
    
    public StudentInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"STUDENT_INFO\" (" + //
                "\"STUDENT_ID\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: student_id
                "\"STUDENT_NAME\" TEXT," + // 1: student_name
                "\"STUDENT_NO\" TEXT," + // 2: student_no
                "\"STUDENT_CLASS\" TEXT);"); // 3: student_class
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"STUDENT_INFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, StudentInfo entity) {
        stmt.clearBindings();
 
        Long student_id = entity.getStudent_id();
        if (student_id != null) {
            stmt.bindLong(1, student_id);
        }
 
        String student_name = entity.getStudent_name();
        if (student_name != null) {
            stmt.bindString(2, student_name);
        }
 
        String student_no = entity.getStudent_no();
        if (student_no != null) {
            stmt.bindString(3, student_no);
        }
 
        String student_class = entity.getStudent_class();
        if (student_class != null) {
            stmt.bindString(4, student_class);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, StudentInfo entity) {
        stmt.clearBindings();
 
        Long student_id = entity.getStudent_id();
        if (student_id != null) {
            stmt.bindLong(1, student_id);
        }
 
        String student_name = entity.getStudent_name();
        if (student_name != null) {
            stmt.bindString(2, student_name);
        }
 
        String student_no = entity.getStudent_no();
        if (student_no != null) {
            stmt.bindString(3, student_no);
        }
 
        String student_class = entity.getStudent_class();
        if (student_class != null) {
            stmt.bindString(4, student_class);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public StudentInfo readEntity(Cursor cursor, int offset) {
        StudentInfo entity = new StudentInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // student_id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // student_name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // student_no
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3) // student_class
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, StudentInfo entity, int offset) {
        entity.setStudent_id(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setStudent_name(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setStudent_no(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setStudent_class(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(StudentInfo entity, long rowId) {
        entity.setStudent_id(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(StudentInfo entity) {
        if(entity != null) {
            return entity.getStudent_id();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(StudentInfo entity) {
        return entity.getStudent_id() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
