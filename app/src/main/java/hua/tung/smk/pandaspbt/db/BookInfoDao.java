package hua.tung.smk.pandaspbt.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table "BOOK_INFO".
*/
public class BookInfoDao extends AbstractDao<BookInfo, Long> {

    public static final String TABLENAME = "BOOK_INFO";

    /**
     * Properties of entity BookInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Book_info_id = new Property(0, Long.class, "book_info_id", true, "BOOK_INFO_ID");
        public final static Property Book_name = new Property(1, String.class, "book_name", false, "BOOK_NAME");
        public final static Property Book_code = new Property(2, String.class, "book_code", false, "BOOK_CODE");
        public final static Property Book_type = new Property(3, String.class, "book_type", false, "BOOK_TYPE");
        public final static Property Form = new Property(4, String.class, "form", false, "FORM");
        public final static Property Book_publisher = new Property(5, String.class, "book_publisher", false, "BOOK_PUBLISHER");
        public final static Property Book_price = new Property(6, String.class, "book_price", false, "BOOK_PRICE");
        public final static Property Book_symbol = new Property(7, String.class, "book_symbol", false, "BOOK_SYMBOL");
    }


    public BookInfoDao(DaoConfig config) {
        super(config);
    }
    
    public BookInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"BOOK_INFO\" (" + //
                "\"BOOK_INFO_ID\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: book_info_id
                "\"BOOK_NAME\" TEXT," + // 1: book_name
                "\"BOOK_CODE\" TEXT," + // 2: book_code
                "\"BOOK_TYPE\" TEXT," + // 3: book_type
                "\"FORM\" TEXT," + // 4: form
                "\"BOOK_PUBLISHER\" TEXT," + // 5: book_publisher
                "\"BOOK_PRICE\" TEXT," + // 6: book_price
                "\"BOOK_SYMBOL\" TEXT);"); // 7: book_symbol
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"BOOK_INFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, BookInfo entity) {
        stmt.clearBindings();
 
        Long book_info_id = entity.getBook_info_id();
        if (book_info_id != null) {
            stmt.bindLong(1, book_info_id);
        }
 
        String book_name = entity.getBook_name();
        if (book_name != null) {
            stmt.bindString(2, book_name);
        }
 
        String book_code = entity.getBook_code();
        if (book_code != null) {
            stmt.bindString(3, book_code);
        }
 
        String book_type = entity.getBook_type();
        if (book_type != null) {
            stmt.bindString(4, book_type);
        }
 
        String form = entity.getForm();
        if (form != null) {
            stmt.bindString(5, form);
        }
 
        String book_publisher = entity.getBook_publisher();
        if (book_publisher != null) {
            stmt.bindString(6, book_publisher);
        }
 
        String book_price = entity.getBook_price();
        if (book_price != null) {
            stmt.bindString(7, book_price);
        }
 
        String book_symbol = entity.getBook_symbol();
        if (book_symbol != null) {
            stmt.bindString(8, book_symbol);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, BookInfo entity) {
        stmt.clearBindings();
 
        Long book_info_id = entity.getBook_info_id();
        if (book_info_id != null) {
            stmt.bindLong(1, book_info_id);
        }
 
        String book_name = entity.getBook_name();
        if (book_name != null) {
            stmt.bindString(2, book_name);
        }
 
        String book_code = entity.getBook_code();
        if (book_code != null) {
            stmt.bindString(3, book_code);
        }
 
        String book_type = entity.getBook_type();
        if (book_type != null) {
            stmt.bindString(4, book_type);
        }
 
        String form = entity.getForm();
        if (form != null) {
            stmt.bindString(5, form);
        }
 
        String book_publisher = entity.getBook_publisher();
        if (book_publisher != null) {
            stmt.bindString(6, book_publisher);
        }
 
        String book_price = entity.getBook_price();
        if (book_price != null) {
            stmt.bindString(7, book_price);
        }
 
        String book_symbol = entity.getBook_symbol();
        if (book_symbol != null) {
            stmt.bindString(8, book_symbol);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public BookInfo readEntity(Cursor cursor, int offset) {
        BookInfo entity = new BookInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // book_info_id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // book_name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // book_code
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // book_type
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // form
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // book_publisher
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // book_price
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7) // book_symbol
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, BookInfo entity, int offset) {
        entity.setBook_info_id(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setBook_name(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setBook_code(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setBook_type(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setForm(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setBook_publisher(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setBook_price(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setBook_symbol(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(BookInfo entity, long rowId) {
        entity.setBook_info_id(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(BookInfo entity) {
        if(entity != null) {
            return entity.getBook_info_id();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(BookInfo entity) {
        return entity.getBook_info_id() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
